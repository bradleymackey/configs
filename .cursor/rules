# Cursor Rules for configs project

## Shell Commands

### Use ripgrep instead of grep
- ALWAYS use `rg` (ripgrep) instead of `grep` for pattern searching
- `grep` is aliased to `rg` in this environment
- Ripgrep is faster and has better defaults (respects .gitignore, colored output, etc.)

Examples:
```bash
# Good - use rg
rg "pattern" file.txt
rg -i "case-insensitive" .
rg -n "with line numbers" src/

# Bad - don't use grep
grep "pattern" file.txt  # This will work but use rg instead
```

### Common rg flags
- `-i` or `--ignore-case`: Case insensitive search
- `-n` or `--line-number`: Show line numbers
- `-l` or `--files-with-matches`: Only show filenames
- `-c` or `--count`: Show count of matches
- `-v` or `--invert-match`: Invert match
- `-A NUM`: Show NUM lines after match
- `-B NUM`: Show NUM lines before match
- `-C NUM`: Show NUM lines around match
- `-t TYPE`: Search only files of TYPE (e.g., `-t ts` for TypeScript)
- `--hidden`: Search hidden files
- `--no-ignore`: Don't respect .gitignore

## Project Conventions

### TypeScript/Bun
- This project uses Bun as the JavaScript runtime
- All scripts are written in TypeScript, not bash
- Use `bun` commands for running scripts, not `node`
- Package manager commands use `bun` (e.g., `bun install`, `bun test`)

### Shell Configuration
- This project uses **bash only**, no zsh support
- Do not add zsh-specific configurations or scripts
- Shell configuration files: `.bashrc`, `.bash_profile`

### Testing
- Use Bun's built-in test runner: `bun test`
- Test files end with `.test.ts`
- All tests should be comprehensive and verify actual behavior
- Tests should use isolated temporary directories to avoid affecting real system

### Installation Scripts
- All installation scripts are in TypeScript under `install/`
- Main installer: `install/install.ts`
- Platform-specific scripts in subdirectories (e.g., `install/macos/`)
- Scripts should support `--dry-run`, `--skip-packages`, `--verbose`, `--help`
- Use `bun run <script-name>` for predefined package.json scripts

### Code Style
- Use clear, descriptive variable names
- Add colored console output for user feedback (INFO, SUCCESS, WARN, ERROR)
- Always handle errors gracefully with try-catch
- Provide helpful error messages
- Use async/await for asynchronous operations
- Prefer explicit over implicit

### Git Workflow
- Write clear, concise commit messages
- Test all changes before committing
- Run `bun test` to verify tests pass
- Use `bun run dry-run` to preview installation changes
